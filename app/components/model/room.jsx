/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/model3d/room.glb 
*/

import React, { useRef, useState } from "react";
import { useGLTF, Html } from "@react-three/drei";
import { Select } from "@react-three/postprocessing";

export function Room(props) {
  const { chartData } = props;

  const { nodes, materials } = useGLTF("/model3d/room.glb");
  const [hover, setHover] = useState();
  const [click, setClick] = useState({
    chair: false,
    tv: false,
    table: false,
    box: false,
  });

  const handleObjectClick = (object) => {
    setClick((prevClick) => ({ ...prevClick, [object]: !prevClick[object] }));
    props.onObjectClick(!click[object]);
  };

  const handleObjectHover = (object) => {
    console.log(object);
    setHover(object);
    props.onObjectHover(object);
  };

  return (
    <group
      onPointerOver={(e) => setHover(e.object.parent.name)}
      onPointerOut={(e) => setHover(null)}
      {...props}
      dispose={null}
    >
      <group position={[-4.2, 0, 4]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes["3D_room001"].geometry}
          material={materials["FrontColor.001"]}
        />
        <mesh
          geometry={nodes["3D_room001_1"].geometry}
          material={materials["Translucent_Glass_Blue.001"]}
        />
        <Select
          name="box"
          enabled={hover === "box" || click.box}
          onPointerOver={() => handleObjectHover("box")}
          onPointerOut={() => handleObjectHover(null)}
          onClick={() => handleObjectClick("box")}
        >
          <group name="box">
            <mesh
              geometry={nodes["3D_room001_2"].geometry}
              material={materials["Formica_Laminate_Dark.001"]}
            >
              {click.box && (
                <Html distanceFactor={15}>
                  <div className="content">
                    <label className="font-bold underline text-lg">API5</label>
                    {!chartData.chartData5.length == 0 ? (
                      <>
                        {chartData.chartData5.map((item, i) => (
                          <div className="grid grid-cols-2" key={i}>
                            <div className="flex justify-start">
                              <label>{item.label}: </label>
                            </div>
                            <div className="flex justify-start">
                              <p>{item.value == null ? "null" : item.value}</p>
                            </div>
                          </div>
                        ))}
                      </>
                    ) : (
                      <p className="text-red-600">Can not load data!</p>
                    )}
                  </div>
                </Html>
              )}
            </mesh>
          </group>
        </Select>
        <group name="table">
          <mesh
            geometry={nodes["3D_room001_3"].geometry}
            material={materials["Formica_Laminate_Light.001"]}
          />
        </group>
        <group name="computer">
          <mesh
            geometry={nodes["3D_room001_4"].geometry}
            material={materials["Color_000.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_5"].geometry}
            material={materials["all_metal.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_6"].geometry}
            material={materials["Color_009.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_7"].geometry}
            material={materials["Translucent_Glass_Gray.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_8"].geometry}
            material={materials["Color_1.001"]}
          />
        </group>

        <Select
          name="tv"
          enabled={hover === "tv" || click.tv}
          onPointerOver={() => handleObjectHover("tv")}
          onPointerOut={() => handleObjectHover(null)}
          onClick={() => handleObjectClick("tv")}
        >
          <group name="TV">
            <mesh
              geometry={nodes["3D_room001_10"].geometry}
              material={materials["TV.001"]}
            />
            <mesh
              geometry={nodes["3D_room001_9"].geometry}
              material={materials["Aluminum.001"]}
            />
            {click.tv && (
              <Html distanceFactor={15}>
                <div className="content">
                  <label className="font-bold underline text-lg">API6</label>
                  {!chartData.chartData6.length == 0 ? (
                    <>
                      {chartData.chartData6.map((item, i) => (
                        <div className="grid grid-cols-2" key={i}>
                          <div className="flex justify-start">
                            <label>{item.label}: </label>
                          </div>
                          <div className="flex justify-start">
                            <p>{item.value == null ? "null" : item.value}</p>
                          </div>
                        </div>
                      ))}
                    </>
                  ) : (
                    <p className="text-red-600">Can not load data!</p>
                  )}
                </div>
              </Html>
            )}
          </group>
        </Select>
        <group name="chair">
          <mesh
            geometry={nodes["3D_room001_11"].geometry}
            material={materials["casters.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_12"].geometry}
            material={materials["CP_B.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_13"].geometry}
            material={materials["_2.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_14"].geometry}
            material={materials["_6.001"]}
          />
          <mesh
            geometry={nodes["3D_room001_15"].geometry}
            material={materials["_1.001"]}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/model3d/room.glb");
