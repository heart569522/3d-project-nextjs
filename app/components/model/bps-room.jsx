/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/model_3d/bps-room.gltf 
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, Html } from "@react-three/drei";
import { Select } from "@react-three/postprocessing";

const generateLabels = (prefix, start, end) => {
  return Array.from({ length: end - start + 1 }, (_, index) => {
    const paddedNumber = (start + index).toString().padStart(3, "0");
    return `${prefix}${paddedNumber}`;
  });
};

const fieldData2Labels = ["IN1", "IN2", "IN3", "IN4"];
const fieldData3Labels = ["IN1", "IN2", "IN3", "IN4", "OUT4"];
const fieldData4Labels = ["IN1", "IN2", "IN3", "IN4", "p221", "p222"];
const fieldData5Labels = generateLabels("p", 1, 20);
const fieldData6Labels = generateLabels("s", 201, 210);

export function Room(props) {
  const handleContextLost = (event) => {
    console.log("WebGL Context Lost", event);
  };

  const handleContextRestored = () => {
    console.log("WebGL Context Restored");
  };

  useEffect(() => {
    const canvasElement = document.querySelector(
      '[data-engine="three.js r160"]'
    );

    if (canvasElement) {
      canvasElement.addEventListener("webglcontextlost", handleContextLost);
      canvasElement.addEventListener(
        "webglcontextrestored",
        handleContextRestored
      );
    }

    return () => {
      if (canvasElement) {
        canvasElement.removeEventListener(
          "webglcontextlost",
          handleContextLost
        );
        canvasElement.removeEventListener(
          "webglcontextrestored",
          handleContextRestored
        );
      }
    };
  }, []);

  const { lastData } = props;

  const { nodes, materials } = useGLTF('/model_3d/bps-room.glb')
  const [hover, setHover] = useState();
  const [click, setClick] = useState({
    chair: false,
    tv: false,
    table: false,
    server1: false,
    server2: false,
    glass: false,
    wall: false,
    computer: false,
  });

  const handleObjectClick = (object) => {
    setClick((prevClick) => ({ ...prevClick, [object]: !prevClick[object] }));
    props.onObjectClick(!click[object]);
  };

  const handleObjectHover = (object) => {
    setHover(object);
    props.onObjectHover(object);
  };

  return (
    <group
      {...props}
      dispose={null}
      onPointerOver={(e) => setHover(e.object.parent.name)}
      onPointerOut={(e) => setHover(null)}
    >
      <group position={[-4.2, 0, 4]}>
        <mesh geometry={nodes['G-table-3'].geometry} material={materials['[Formica Laminate Light]']} position={[1.409, 0.691, -4.1]} rotation={[0, 0.244, 0]} />
        <mesh geometry={nodes['G-table-2'].geometry} material={materials['[Formica Laminate Light]']} position={[1.109, 0.691, -2.376]} rotation={[0, 0.244, 0]} />
        <mesh geometry={nodes['G-table-1'].geometry} material={materials['[Formica Laminate Light]']} position={[3.05, 0.691, -2.86]} rotation={[0, 0.244, 0]} />

        <mesh geometry={nodes['G-floor'].geometry} material={materials.Material} position={[4.335, 0.15, -4.09]} />

        <mesh geometry={nodes['G-column-1'].geometry} material={materials.Material} position={[8.495, 1.8, -0.125]} />
        <mesh geometry={nodes['G-column-2'].geometry} material={materials.Material} position={[4.335, 1.8, -0.125]} />
        <mesh geometry={nodes['G-column-5'].geometry} material={materials.Material} position={[0.175, 1.8, -8.055]} />
        <mesh geometry={nodes['G-column-4'].geometry} material={materials.Material} position={[0.175, 1.8, -4.09]} />
        <mesh geometry={nodes['G-column-6'].geometry} material={materials.Material} position={[4.335, 1.8, -8.055]} />
        <mesh geometry={nodes['G-column-8'].geometry} material={materials.Material} position={[8.495, 1.8, -4.09]} />
        <mesh geometry={nodes['G-column-3'].geometry} material={materials.Material} position={[0.175, 1.8, -0.125]} />
        <mesh geometry={nodes['G-column-7'].geometry} material={materials.Material} position={[8.495, 1.8, -8.055]} />

        <Select
          name="chair"
          enabled={hover === "chair" || click.chair}
          onPointerOver={() => handleObjectHover("chair")}
          onPointerOut={() => handleObjectHover(null)}
          onClick={() => handleObjectClick("chair")}
        >
          <group position={[0.928, 0.735, -3.103]}>
            <mesh geometry={nodes['G-chair-1_1'].geometry} material={materials.CP_B} />
            <mesh geometry={nodes['G-chair-1_2'].geometry} material={materials['*2']} />
            <mesh geometry={nodes['G-chair-1_3'].geometry} material={materials.casters} />
            <mesh geometry={nodes['G-chair-1_4'].geometry} material={materials['*6']} />
            <mesh geometry={nodes['G-chair-1_5'].geometry} material={materials['*1']} />
          </group>
          <group position={[2.816, 0.735, -3.547]}>
            {click.chair && (
              <Html distanceFactor={15}>
                <div className="content">
                  <label className="font-bold underline text-lg">API3</label>
                  <div className="grid grid-cols-2">
                    {fieldData3Labels.map((fieldLabel, index) => (
                      <React.Fragment key={index}>
                        <div className="flex justify-start">
                          <label>{fieldLabel}: </label>
                        </div>
                        <div className="flex justify-start">
                          <p>
                            {lastData?.lastData3?.[fieldLabel] == null
                              ? "null"
                              : lastData?.lastData3?.[fieldLabel]}
                          </p>
                        </div>
                      </React.Fragment>
                    ))}
                  </div>
                </div>
              </Html>
            )}
            <mesh geometry={nodes['G-chair-2_1'].geometry} material={materials.CP_B} />
            <mesh geometry={nodes['G-chair-2_2'].geometry} material={materials['*2']} />
            <mesh geometry={nodes['G-chair-2_3'].geometry} material={materials.casters} />
            <mesh geometry={nodes['G-chair-2_4'].geometry} material={materials['*6']} />
            <mesh geometry={nodes['G-chair-2_5'].geometry} material={materials['*1']} />
          </group>
          <group position={[1.295, 0.735, -4.83]}>
            <mesh geometry={nodes['G-chair-3_1'].geometry} material={materials.CP_B} />
            <mesh geometry={nodes['G-chair-3_2'].geometry} material={materials['*2']} />
            <mesh geometry={nodes['G-chair-3_3'].geometry} material={materials.casters} />
            <mesh geometry={nodes['G-chair-3_4'].geometry} material={materials['*6']} />
            <mesh geometry={nodes['G-chair-3_5'].geometry} material={materials['*1']} />
          </group>
        </Select>

        <Select
          name="tv"
          enabled={hover === "tv" || click.tv}
          onPointerOver={() => handleObjectHover("tv")}
          onPointerOut={() => handleObjectHover(null)}
          onClick={() => handleObjectClick("tv")}
          position={[2.322, 1.725, -1.052]}
        >
          <mesh geometry={nodes['G-TV_1'].geometry} material={materials.TV} />
          <mesh geometry={nodes['G-TV_2'].geometry} material={materials['[Aluminum]']} />
          {click.tv && (
            <Html distanceFactor={15}>
              <div className="content">
                <div className="block mb-1">
                  <label className="font-bold underline text-lg">API1</label>
                  <div className="grid grid-cols-2">
                    <div className="flex justify-start">
                      <label>OUT1: </label>
                    </div>
                    <div className="flex justify-start">
                      <p>
                        {lastData?.lastData1?.OUT1 == null
                          ? "null"
                          : lastData?.lastData1?.OUT1}
                      </p>
                    </div>
                  </div>
                </div>
                <div className="block mt-1">
                  <label className="font-bold underline text-lg">API6</label>
                  <div className="grid grid-cols-2">
                    {fieldData6Labels.map((fieldLabel, index) => (
                      <React.Fragment key={index}>
                        <div className="flex justify-start">
                          <label>{fieldLabel}: </label>
                        </div>
                        <div className="flex justify-start">
                          <p>
                            {lastData?.lastData6?.[fieldLabel] == null
                              ? "null"
                              : lastData?.lastData6?.[fieldLabel]
                                .toFixed(2)
                                .toLocaleString()}
                          </p>
                        </div>
                      </React.Fragment>
                    ))}
                  </div>
                </div>
              </div>
            </Html>
          )}
        </Select>

        <Select
          name="computer"
          enabled={hover === "computer" || click.computer}
          onPointerOver={() => handleObjectHover("computer")}
          onPointerOut={() => handleObjectHover(null)}
          onClick={() => handleObjectClick("computer")}
        >
          <group position={[3.045, 1.099, -2.887]}>
            <mesh geometry={nodes['G-com-1_1'].geometry} material={materials['all metal']} />
            <mesh geometry={nodes['G-com-1_2'].geometry} material={materials.Color_009} />
            <mesh geometry={nodes['G-com-1_3'].geometry} material={materials.Color_000} />
            <mesh geometry={nodes['G-com-1_4'].geometry} material={materials.Color_1} />
            <mesh geometry={nodes['G-com-1_5'].geometry} material={materials.Translucent_Glass_Gray} />
          </group>
          <group position={[1.159, 1.099, -2.323]}>
            <mesh geometry={nodes['G-com-2_1'].geometry} material={materials['all metal']} />
            <mesh geometry={nodes['G-com-2_2'].geometry} material={materials.Color_009} />
            <mesh geometry={nodes['G-com-2_3'].geometry} material={materials.Color_1} />
            <mesh geometry={nodes['G-com-2_4'].geometry} material={materials.Color_000} />
            <mesh geometry={nodes['G-com-2_5'].geometry} material={materials.Translucent_Glass_Gray} />
          </group>
          <group position={[1.505, 1.099, -4.077]}>
            {click.computer && (
              <Html distanceFactor={15}>
                <div className="content">
                  <label className="font-bold underline text-lg">API4</label>
                  <div className="grid grid-cols-2">
                    {fieldData4Labels.map((fieldLabel, index) => (
                      <React.Fragment key={index}>
                        <div className="flex justify-start">
                          <label>{fieldLabel}: </label>
                        </div>
                        <div className="flex justify-start">
                          <p>
                            {lastData?.lastData4?.[fieldLabel] == null
                              ? "null"
                              : fieldLabel == "p221" || fieldLabel == "p222"
                                ? lastData?.lastData4?.[fieldLabel].toFixed(2)
                                : lastData?.lastData4?.[fieldLabel]}
                          </p>
                        </div>
                      </React.Fragment>
                    ))}
                  </div>
                </div>
              </Html>
            )}
            <mesh geometry={nodes['G-com-3_1'].geometry} material={materials['all metal']} />
            <mesh geometry={nodes['G-com-3_2'].geometry} material={materials.Color_009} />
            <mesh geometry={nodes['G-com-3_3'].geometry} material={materials.Color_000} />
            <mesh geometry={nodes['G-com-3_4'].geometry} material={materials.Translucent_Glass_Gray} />
            <mesh geometry={nodes['G-com-3_5'].geometry} material={materials.Color_1} />
          </group>
        </Select>

        <Select
          name="server1"
          enabled={hover === "server1" || click.server1}
          onPointerOver={() => handleObjectHover("server1")}
          onPointerOut={() => handleObjectHover(null)}
          onClick={() => handleObjectClick("server1")}
          position={[5.353, 1.313, -1.467]}
        >
          <mesh geometry={nodes['G-server-1'].geometry} material={materials['[Formica Laminate Dark]']} />
          {click.server1 && (
            <Html distanceFactor={15}>
              <div className="content">
                <label className="font-bold underline text-lg">API5</label>
                <div className="grid grid-cols-2">
                  {fieldData5Labels.map((fieldLabel, index) => (
                    <React.Fragment key={index}>
                      <div className="flex justify-start">
                        <label>{fieldLabel}: </label>
                      </div>
                      <div className="flex justify-start">
                        <p>
                          {lastData?.lastData5?.[fieldLabel] == null
                            ? "null"
                            : lastData?.lastData5?.[fieldLabel]
                              .toFixed(2)
                              .toLocaleString()}
                        </p>
                      </div>
                    </React.Fragment>
                  ))}
                </div>
              </div>
            </Html>
          )}
        </Select>

        <mesh geometry={nodes['G-server-2'].geometry} material={materials['[Formica Laminate Dark]']} position={[6.453, 1.313, -1.467]} />

        <mesh geometry={nodes['G-wall-1'].geometry} material={materials.Material} position={[5.915, 1.8, -0.05]} />
        <mesh geometry={nodes['G-wall-2'].geometry} material={materials.Material} position={[2.255, 1.8, -0.05]} />
        <mesh geometry={nodes['G-wall-3'].geometry} material={materials.Material} position={[6.415, 1.8, -8.055]} />
        <mesh geometry={nodes['G-wall-4'].geometry} material={materials.Material} position={[2.255, 1.8, -8.055]} />

        <Select
          name="glass"
          enabled={hover === "glass" || click.glass}
          onPointerOver={() => handleObjectHover("glass")}
          onPointerOut={() => handleObjectHover(null)}
          onClick={() => handleObjectClick("glass")}
        >
          <mesh geometry={nodes['G-wall_glass-1'].geometry} material={materials['[Translucent Glass Blue]']} position={[0.025, 1.8, -2.107]} />
          <mesh geometry={nodes['G-wall_glass-2'].geometry} material={materials['[Translucent Glass Blue]']} position={[8.345, 1.8, -2.107]}>
            {click.glass && (
              <Html distanceFactor={15}>
                <div className="content">
                  <label className="font-bold underline text-lg">API2</label>
                  <div className="grid grid-cols-2">
                    {fieldData2Labels.map((fieldLabel, index) => (
                      <React.Fragment key={index}>
                        <div className="flex justify-start">
                          <label>{fieldLabel}: </label>
                        </div>
                        <div className="flex justify-start">
                          <p>
                            {lastData?.lastData2?.[fieldLabel] == null
                              ? "null"
                              : lastData?.lastData2?.[fieldLabel]}
                          </p>
                        </div>
                      </React.Fragment>
                    ))}
                  </div>
                </div>
              </Html>
            )}
          </mesh>
          <mesh geometry={nodes['G-wall_glass-3'].geometry} material={materials['[Translucent Glass Blue]']} position={[8.345, 1.8, -6.073]} />
          <mesh geometry={nodes['G-wall_glass-4'].geometry} material={materials['[Translucent Glass Blue]']} position={[7.795, 1.8, 0.025]} />
          <mesh geometry={nodes['G-wall_glass-5'].geometry} material={materials['[Translucent Glass Blue]']} position={[0.025, 1.8, -5.598]} />
          <mesh geometry={nodes['G-wall_glass-6'].geometry} material={materials['[Translucent Glass Blue]']} position={[0.075, 1.8, -7.405]} />
        </Select>
      </group>
    </group>
  )
}

useGLTF.preload('/model_3d/bps-room.glb')
